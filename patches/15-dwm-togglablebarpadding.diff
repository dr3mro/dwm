diff --git a/config.def.h b/config.def.h
index a7ebac3..57e1c0c 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,6 +5,8 @@ static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
+static const int vertpad            = 10;       /* vertical padding of bar */
+static const int sidepad            = 10;       /* horizontal padding of bar */
 static const char *fonts[]          = { "JetBrainsMonoMedium Nerd Font:style=Medium,Regular:size=14" };
 static const char dmenufont[]       = "JetBrainsMonoMedium Nerd Font:style=Medium,Regular:size=14";
 static const char col_gray1[]       = "#222222";
@@ -65,8 +67,12 @@ static const Layout layouts[] = {
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
 /* commands */
-static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
+static char dmenumon[2] = "0"; //Monitor//
+static char dmpx[3] = "10"; 
+static char dmpy[3] = "10";
+static char dmpz[5] = "1900"; 
+			//
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, "-x", dmpx , "-y", dmpy, "-z", dmpz, NULL };
 static const char *termcmd[]  = { "st", NULL };
 
 static const char *brightnessUp[] = { "backlight", "incr","10", NULL };
@@ -86,9 +92,10 @@ static const char *lock[] = { "slock", NULL };
 #include "exitdwm.c"
 static const Key keys[] = {
 	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
+	{ MODKEY,                       XK_p,      dmenulaunch,    {.v = dmenucmd} },
 	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
 	{ MODKEY,                       XK_b,      togglebar,      {0} },
+	{ MODKEY|ShiftMask,    		XK_b,      togglepadding,  {0} },
 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
 	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
diff --git a/dwm.c b/dwm.c
index a10e322..35353fb 100644
--- a/dwm.c
+++ b/dwm.c
@@ -212,11 +212,13 @@ static void setmfact(const Arg *arg);
 static void setup(void);
 static void seturgent(Client *c, int urg);
 static void showhide(Client *c);
+static void dmenulaunch( const Arg *arg);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *m);
 static void togglealttag(const Arg *arg);
+static void togglepadding(const Arg *arg);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
 static void toggletag(const Arg *arg);
@@ -252,9 +254,12 @@ static const char localshare[] = ".local/share";
 static char stext[256];
 static char fribidi_text[256];
 static int screen;
+static int enablepadding=1;
 static int sw, sh;           /* X display screen geometry width, height */
 static int bh;               /* bar height */
 static int lrpad;            /* sum of left and right padding for text */
+static int vp;               /* vertical padding for bar */
+static int sp;               /* side padding for bar */
 static int (*xerrorxlib)(Display *, XErrorEvent *);
 static unsigned int numlockmask = 0;
 static void (*handler[LASTEvent]) (XEvent *) = {
@@ -605,7 +610,13 @@ configurenotify(XEvent *e)
 				for (c = m->clients; c; c = c->next)
 					if (c->isfullscreen)
 						resizeclient(c, m->mx, m->my, m->mw, m->mh);
-				XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
+
+				if (enablepadding)
+					XMoveResizeWindow(dpy, m->barwin, m->wx + sp, m->by + vp, m->ww -  2 * sp, bh);
+				else
+					XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
+
+
 			}
 			focus(NULL);
 			arrange(NULL);
@@ -746,7 +757,10 @@ drawbar(Monitor *m)
 	if (m == selmon) { /* status is only drawn on selected monitor */
 		drw_setscheme(drw, scheme[SchemeNorm]);
 		tw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
-		drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
+		if (enablepadding)
+			drw_text(drw, m->ww - tw - 2 * sp, 0, tw, bh, 0, stext, 0);
+		else
+			drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
 	}
 
 	for (c = m->clients; c; c = c->next) {
@@ -775,12 +789,19 @@ drawbar(Monitor *m)
 		if (m->sel) {
 			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
 			apply_fribidi(m->sel->name);
-			drw_text(drw, x, 0, w, bh, lrpad / 2, fribidi_text, 0);
+			if (enablepadding)
+				drw_text(drw, x, 0, w -2 * sp, bh, lrpad / 2, fribidi_text, 0);
+			else
+				drw_text(drw, x, 0, w, bh, lrpad / 2, fribidi_text, 0);
+
 			if (m->sel->isfloating)
 				drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
 		} else {
 			drw_setscheme(drw, scheme[SchemeNorm]);
-			drw_rect(drw, x, 0, w, bh, 1, 1);
+			if (enablepadding)
+				drw_rect(drw, x, 0, w -2 * sp, bh, 1, 1);
+			else
+				drw_rect(drw, x, 0, w, bh, 1, 1);
 		}
 	}
 	drw_map(drw, m->barwin, 0, 0, m->ww, bh);
@@ -1700,7 +1721,12 @@ setup(void)
 		die("no fonts could be loaded.");
 	lrpad = drw->fonts->h;
 	bh = drw->fonts->h + 2;
+	if (enablepadding){
+		sp = sidepad;
+		vp = (topbar == 1) ? vertpad : - vertpad;
+	}
 	updategeom();
+
 	/* init atoms */
 	utf8string = XInternAtom(dpy, "UTF8_STRING", False);
 	wmatom[WMProtocols] = XInternAtom(dpy, "WM_PROTOCOLS", False);
@@ -1781,13 +1807,28 @@ showhide(Client *c)
 	}
 }
 
+void
+dmenulaunch(const Arg *arg)
+{
+	dmenumon[0] = '0' + selmon->num;
+
+	if (enablepadding){
+		strcpy(dmpx,"10");
+		strcpy(dmpy,"10");
+		strcpy(dmpz,"1900");
+	} else {
+		strcpy(dmpx,"0");
+		strcpy(dmpy,"0");
+		strcpy(dmpz,"0");
+	}
+	spawn(arg);
+}
+
 void
 spawn(const Arg *arg)
 {
 	struct sigaction sa;
 
-	if (arg->v == dmenucmd)
-		dmenumon[0] = '0' + selmon->num;
 	if (fork() == 0) {
 		if (dpy)
 			close(ConnectionNumber(dpy));
@@ -1861,7 +1902,24 @@ togglebar(const Arg *arg)
 {
 	selmon->showbar = !selmon->showbar;
 	updatebarpos(selmon);
-	XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
+	if (enablepadding)
+		XMoveResizeWindow(dpy, selmon->barwin, selmon->wx + sp, selmon->by + vp, selmon->ww - 2 * sp, bh);
+	else
+		XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
+
+	arrange(selmon);
+}
+
+void
+togglepadding(const Arg *arg)
+{
+	enablepadding = 1 -enablepadding;
+	updatebarpos(selmon);
+	if (enablepadding){
+		XMoveResizeWindow(dpy, selmon->barwin, selmon->wx + sp, selmon->by + vp, selmon->ww - 2 * sp, bh);
+	} else {
+		XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
+	}
 	arrange(selmon);
 }
 
@@ -1974,9 +2032,15 @@ updatebars(void)
 	for (m = mons; m; m = m->next) {
 		if (m->barwin)
 			continue;
-		m->barwin = XCreateWindow(dpy, root, m->wx, m->by, m->ww, bh, 0, depth,
+		if(enablepadding){
+			m->barwin = XCreateWindow(dpy, root, m->wx + sp, m->by + vp, m->ww -2 *sp, bh, 0, depth,
 				InputOutput, visual,
 				CWOverrideRedirect|CWBackPixel|CWBorderPixel|CWColormap|CWEventMask, &wa);
+		}else{
+			m->barwin = XCreateWindow(dpy, root, m->wx, m->by, m->ww, bh, 0, depth,
+				InputOutput, visual,
+				CWOverrideRedirect|CWBackPixel|CWBorderPixel|CWColormap|CWEventMask, &wa);
+		}
 		XDefineCursor(dpy, m->barwin, cursor[CurNormal]->cursor);
 		XMapRaised(dpy, m->barwin);
 		XSetClassHint(dpy, m->barwin, &ch);
@@ -1988,12 +2052,25 @@ updatebarpos(Monitor *m)
 {
 	m->wy = m->my;
 	m->wh = m->mh;
-	if (m->showbar) {
-		m->wh -= bh;
-		m->by = m->topbar ? m->wy : m->wy + m->wh;
-		m->wy = m->topbar ? m->wy + bh : m->wy;
-	} else
-		m->by = -bh;
+
+	if (enablepadding){
+		if (m->showbar) {
+			m->wh = m->wh - vertpad - bh;
+			m->by = m->topbar ? m->wy : m->wy + m->wh + vertpad;
+			m->wy = m->topbar ? m->wy + bh + vp : m->wy;
+		}else{
+			m->by = -bh - vp;
+		}
+	}else{
+		if (m->showbar) {
+			m->wh -= bh;
+			m->by = m->topbar ? m->wy : m->wy + m->wh;
+			m->wy = m->topbar ? m->wy + bh : m->wy;
+		}else{
+			m->by = -bh;
+		}
+
+	}
 }
 
 void
diff --git a/exitdwm.c b/exitdwm.c
index 4163306..b42fd6a 100644
--- a/exitdwm.c
+++ b/exitdwm.c
@@ -37,7 +37,24 @@ void exitdwm ()
 # define S_FORMAT(ACTION) S_##ACTION##_ICON " " S_##ACTION
 # define S_FORMAT_CLEAR "sed 's/^..//'"
 
-	FILE * exit_menu = popen (
+	FILE * exit_menu;  
+
+	if (enablepadding)
+		exit_menu = popen (
+		"echo \""
+			S_FORMAT (LOCK) "\n"
+			S_FORMAT (SUSPEND) "\n"
+			S_FORMAT (OFFSCREEN) "\n"
+			S_FORMAT (EXIT) "\n"
+			S_FORMAT (REBOOT) "\n"
+			S_FORMAT (SHUTDOWN)
+			"\" | dmenu -p exit: -x 10 -y 10 -z 1900 -fn \"JetBrainsMonoMedium Nerd Font:style=Medium,Regular:size=14\" | " S_FORMAT_CLEAR
+		,
+		"r"
+	);
+
+	else
+		exit_menu = popen (
 		"echo \""
 			S_FORMAT (LOCK) "\n"
 			S_FORMAT (SUSPEND) "\n"
@@ -45,7 +62,7 @@ void exitdwm ()
 			S_FORMAT (EXIT) "\n"
 			S_FORMAT (REBOOT) "\n"
 			S_FORMAT (SHUTDOWN)
-			"\" | dmenu -p exit: -fn \"JetBrainsMonoMedium Nerd Font:style=Medium,Regular:size=14\" | " S_FORMAT_CLEAR
+			"\" | dmenu -p exit: -x 0 -y 0 -z 0 -fn \"JetBrainsMonoMedium Nerd Font:style=Medium,Regular:size=14\" | " S_FORMAT_CLEAR
 		,
 		"r"
 	);
